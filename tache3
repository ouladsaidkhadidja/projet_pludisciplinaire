import numpy as np 
import matplotlib.pyplot as plt
from matplotlib.widgets import Button
from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata

# Lire les coordonnées du fichier
def readCoord(filename, step):
    radius = []
    with open(filename, 'r') as file:
        for i, line in enumerate(file):
            try:
                value = float(line.strip())
                radius.append(value)
            except ValueError:
                continue
    
    indices = np.arange(0, len(radius), step)  # Sélection avec l'incrémentation choisie
    radius = [radius[i] for i in indices]  # Filtrer les valeurs 
    theta = np.radians(indices + 1)  # Ajuster theta pour correspondre aux indices
    
    return radius, theta

dataset = "data.atn"
step_choice = 1

def plot_2d():
    """Affichage du graphe en 2D avec choix du pas."""
    def updateplot(step):
        global step_choice
        step_choice = step
        radius, theta = readCoord(dataset, step_choice)
        ax2d.clear()
        ax2d.set_theta_zero_location("N")
        ax2d.set_theta_direction(-1)
        ax2d.plot(theta, radius, linestyle='-', lw=0.9, color='b', label=f"Pas {step_choice}°")
        ax2d.set_title("Diagramme en coordonnées polaires", fontsize=14, fontweight='bold')
        ax2d.legend()
        ax2d.grid(True, linestyle='--', linewidth=0.5, alpha=0.7)
        plt.draw()
    
    updateplot(step_choice)
    
    ax1 = plt.axes([0.3, 0.05, 0.1, 0.075])
    ax5 = plt.axes([0.6, 0.05, 0.1, 0.075])
    but1 = Button(ax1, '1°')
    but5 = Button(ax5, '5°')
    but1.on_clicked(lambda event: updateplot(1))
    but5.on_clicked(lambda event: updateplot(5))

def plot_3d():
    """Affichage du graphe en 3D avec des lignes continues."""
    radius, theta = readCoord(dataset, step_choice)
    x = np.cos(theta) * radius
    y = np.sin(theta) * radius
    z = np.zeros_like(radius)
    
    ax3d.clear()
    ax3d.plot(x, y, z, linestyle='-', lw=0.9, color='b')
    ax3d.set_title("Tracé en 3D")
    ax3d.set_xlabel("X")
    ax3d.set_ylabel("Y")
    ax3d.set_zlabel("Amplitude")

def plot_lissage():
    """Affichage du graphe lissé en 3D avec une barre de couleur."""
    radius, theta = readCoord(dataset, step_choice)
    x = np.cos(theta) * radius
    y = np.sin(theta) * radius
    z = radius
    
    # Création d'une grille pour interpolation
    grid_x, grid_y = np.meshgrid(np.linspace(min(x), max(x), 100), np.linspace(min(y), max(y), 100))
    grid_z = griddata((x, y), z, (grid_x, grid_y), method='cubic')
    
    axliss.clear()
    surf = axliss.plot_surface(grid_x, grid_y, grid_z, cmap='jet', edgecolor='none')
    axliss.set_title("Tracé lissé en 3D")
    axliss.set_xlabel("X")
    axliss.set_ylabel("Y")
    axliss.set_zlabel("Amplitude")
    fig.colorbar(surf, ax=axliss, shrink=0.5, aspect=10, label='dBi')

# Choix de l'affichage
graph_choice = input("Choisissez l'affichage: 1: 2D, 2: 3D, 3: Lissage, 4: Les 3 en même temps: ")
fig = plt.figure(figsize=(12, 6))

if graph_choice == "1":
    ax2d = fig.add_subplot(111, projection='polar')
    plot_2d()
elif graph_choice == "2":
    ax3d = fig.add_subplot(111, projection='3d')
    plot_3d()
elif graph_choice == "3":
    axliss = fig.add_subplot(111, projection='3d')
    plot_lissage()
elif graph_choice == "4":
    ax2d = fig.add_subplot(131, projection='polar')
    ax3d = fig.add_subplot(132, projection='3d')
    axliss = fig.add_subplot(133, projection='3d')
    plot_2d()
    plot_3d()
    plot_lissage()
else:
    print("Choix invalide. Veuillez entrer 1, 2, 3 ou 4.")

plt.show()

